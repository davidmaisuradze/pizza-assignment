{"version":3,"sources":["../../src/services/auth.service.js"],"names":["login","email","password","UserModel","findOne","user","status","HttpStatus","BAD_REQUEST","data","bcrypt","compareSync","passwordHash","generatedJWT","jwt","sign","process","env","JWT_SECRET","expiresIn","userObject","toObject","userToAuthJson","token","OK","console","log","register","confirmedPassword","firstName","lastName","genSalt","salt","hashSync","newUser","role","ROLES","User","save","result"],"mappings":"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","file":"auth.service.js","sourcesContent":["import UserModel from '../models/user.model';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport HttpStatus from 'http-status';\r\nimport { ROLES } from '../config/constants';\r\n\r\nexport const login = async (email, password) => {\r\n    try {\r\n        const user = await UserModel.findOne({email: email});\r\n\r\n        if (!user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user not found'};\r\n        }\r\n\r\n        if (user && bcrypt.compareSync(password, user.passwordHash)) {\r\n            const generatedJWT = jwt.sign({\r\n                email: email\r\n            }, process.env.JWT_SECRET, {expiresIn: '7d'});\r\n\r\n            const userObject = {...user.toObject()};\r\n            delete userObject.passwordHash;\r\n\r\n            const userToAuthJson = {\r\n                token: generatedJWT,\r\n                user: {\r\n                    email: email,\r\n                    ...userObject\r\n                }\r\n            };\r\n            return {status: HttpStatus.OK, data: userToAuthJson};\r\n        } else {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'Invalid credentials'};\r\n        }\r\n    } catch (err) {\r\n        console.log(err, 'err');\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n\r\nexport const register = async (data) => {\r\n    try {\r\n        const {email, password, confirmedPassword, firstName, lastName} = data;\r\n\r\n        if (password !== confirmedPassword) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'passwords not match'};\r\n        }\r\n\r\n        const user = await UserModel.findOne({email: email});\r\n        if (user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user already exists'};\r\n        }\r\n\r\n        const salt = await bcrypt.genSalt(10);\r\n        const passwordHash = bcrypt.hashSync(password, salt);\r\n\r\n        const newUser = new UserModel({\r\n            email: email,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            passwordHash: passwordHash,\r\n            role: ROLES.User // assign default user role to newly registered user\r\n        });\r\n        const result = await newUser.save();\r\n        delete result.passwordHash;\r\n\r\n        return {status: HttpStatus.OK, data: result};\r\n    } catch (err) {\r\n        console.log(err, 'err');\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n"]}
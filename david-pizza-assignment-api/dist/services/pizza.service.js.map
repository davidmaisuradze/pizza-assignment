{"version":3,"sources":["../../src/services/pizza.service.js"],"names":["getAllPizzas","PizzaModel","find","sort","pizzas","status","HttpStatus","OK","data","BAD_REQUEST","createPizza","currentUserEmail","title","description","type","price","userEmail","email","UserModel","findOne","user","newPizza","save","result","console","log","updatePizza","_id","findOneAndUpdate","$set","upsert","new","deletePizza","pizzaId","findOneAndDelete"],"mappings":"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","file":"pizza.service.js","sourcesContent":["import PizzaModel from '../models/pizza.model';\r\nimport UserModel from '../models/user.model';\r\nimport HttpStatus from 'http-status';\r\n\r\nexport const getAllPizzas = async () => {\r\n    try {\r\n        const pizzas = await PizzaModel.find({}).sort('-createdAt');\r\n\r\n        return {status: HttpStatus.OK, data: pizzas};\r\n    } catch (err) {\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n\r\nexport const createPizza = async (currentUserEmail, data) => {\r\n    try {\r\n        const {title, description, type, price, userEmail} = data;\r\n\r\n        const email = userEmail || currentUserEmail;\r\n\r\n        const user = await UserModel.findOne({email: email});\r\n        if (!user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user not found'};\r\n        }\r\n\r\n        const newPizza = new PizzaModel({\r\n            title,\r\n            description,\r\n            type,\r\n            price,\r\n            userEmail: email\r\n        });\r\n        const result = await newPizza.save();\r\n\r\n        return {status: HttpStatus.OK, data: result};\r\n    } catch (err) {\r\n        console.log(err, 'err');\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n\r\nexport const updatePizza = async (currentUserEmail, data) => {\r\n    try {\r\n        const {_id, title, description, type, price, userEmail} = data;\r\n\r\n        const email = userEmail || currentUserEmail;\r\n\r\n        const user = await UserModel.findOne({email: email});\r\n        if (!user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user not found'};\r\n        }\r\n\r\n        const result = await PizzaModel.findOneAndUpdate(\r\n            {_id: _id},\r\n            {\r\n                $set: {\r\n                    title,\r\n                    description,\r\n                    type,\r\n                    price,\r\n                    userEmail: email\r\n                }\r\n            },\r\n            {upsert: true, new: true}\r\n        );\r\n\r\n        return {status: HttpStatus.OK, data: result};\r\n    } catch (err) {\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n\r\nexport const deletePizza = async pizzaId => {\r\n    try {\r\n        const result = await PizzaModel.findOneAndDelete({_id: pizzaId});\r\n\r\n        return {status: HttpStatus.OK, data: result};\r\n    } catch (err) {\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n"]}
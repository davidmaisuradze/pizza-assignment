{"version":3,"sources":["../../src/services/order.service.js"],"names":["getAllOrders","currentUserEmail","UserModel","findOne","email","user","status","HttpStatus","BAD_REQUEST","data","OrderModel","find","userEmail","sort","orders","OK","createOrder","name","surname","mobile","address","totalPrice","orderedPizzas","newOrder","save","result","console","log"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA;AAAA,wFAAe,iBAAOC,gBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEDC,eAAUC,OAAV,CAAkB,EAACC,OAAOH,gBAAR,EAAlB,CAFC;;AAAA;AAEdI,4BAFc;;AAAA,4BAGfA,IAHe;AAAA;AAAA;AAAA;;AAAA,yDAIT,EAACC,QAAQC,qBAAWC,WAApB,EAAiCC,MAAM,gBAAvC,EAJS;;AAAA;AAAA;AAAA,+BAOCC,gBAAWC,IAAX,CAAgB,EAACC,WAAWX,gBAAZ,EAAhB,EAA+CY,IAA/C,CAAoD,YAApD,CAPD;;AAAA;AAOdC,8BAPc;AAAA,yDAQb,EAACR,QAAQC,qBAAWQ,EAApB,EAAwBN,MAAMK,MAA9B,EARa;;AAAA;AAAA;AAAA;AAAA,yDAUb,EAACR,QAAQC,qBAAWC,WAApB,EAAiCC,iBAAjC,EAVa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAcA,IAAMO;AAAA,yFAAc,kBAAOf,gBAAP,EAAyBQ,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZQ,4BAFY,GAEiDR,IAFjD,CAEZQ,IAFY,EAENC,OAFM,GAEiDT,IAFjD,CAENS,OAFM,EAEGC,MAFH,GAEiDV,IAFjD,CAEGU,MAFH,EAEWC,OAFX,GAEiDX,IAFjD,CAEWW,OAFX,EAEoBC,UAFpB,GAEiDZ,IAFjD,CAEoBY,UAFpB,EAEgCC,aAFhC,GAEiDb,IAFjD,CAEgCa,aAFhC;AAAA;AAAA,+BAIApB,eAAUC,OAAV,CAAkB,EAACC,OAAOH,gBAAR,EAAlB,CAJA;;AAAA;AAIbI,4BAJa;;AAAA,4BAKdA,IALc;AAAA;AAAA;AAAA;;AAAA,0DAMR,EAACC,QAAQC,qBAAWC,WAApB,EAAiCC,MAAM,gBAAvC,EANQ;;AAAA;AASbc,gCATa,GASF,IAAIb,eAAJ,CAAe;AAC5BO,sCAD4B;AAE5BC,4CAF4B;AAG5BC,0CAH4B;AAI5BC,4CAJ4B;AAK5BC,kDAL4B;AAM5BC,wDAN4B;AAO5BV,uCAAWX;AAPiB,yBAAf,CATE;AAAA;AAAA,+BAkBEsB,SAASC,IAAT,EAlBF;;AAAA;AAkBbC,8BAlBa;AAAA,0DAoBZ,EAACnB,QAAQC,qBAAWQ,EAApB,EAAwBN,MAAMgB,MAA9B,EApBY;;AAAA;AAAA;AAAA;;AAsBnBC,gCAAQC,GAAR,eAAiB,KAAjB;AAtBmB,0DAuBZ,EAACrB,QAAQC,qBAAWC,WAApB,EAAiCC,kBAAjC,EAvBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"order.service.js","sourcesContent":["import OrderModel from '../models/order.model';\r\nimport HttpStatus from 'http-status';\r\nimport UserModel from '../models/user.model';\r\n\r\nexport const getAllOrders = async (currentUserEmail) => {\r\n    try {\r\n        const user = await UserModel.findOne({email: currentUserEmail});\r\n        if (!user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user not found'};\r\n        }\r\n\r\n        const orders = await OrderModel.find({userEmail: currentUserEmail}).sort('-createdAt');\r\n        return {status: HttpStatus.OK, data: orders};\r\n    } catch (err) {\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n\r\nexport const createOrder = async (currentUserEmail, data) => {\r\n    try {\r\n        const {name, surname, mobile, address, totalPrice, orderedPizzas} = data;\r\n\r\n        const user = await UserModel.findOne({email: currentUserEmail});\r\n        if (!user) {\r\n            return {status: HttpStatus.BAD_REQUEST, data: 'user not found'};\r\n        }\r\n\r\n        const newOrder = new OrderModel({\r\n            name,\r\n            surname,\r\n            mobile,\r\n            address,\r\n            totalPrice,\r\n            orderedPizzas,\r\n            userEmail: currentUserEmail\r\n        });\r\n        const result = await newOrder.save();\r\n\r\n        return {status: HttpStatus.OK, data: result};\r\n    } catch (err) {\r\n        console.log(err, 'err');\r\n        return {status: HttpStatus.BAD_REQUEST, data: err};\r\n    }\r\n};\r\n"]}